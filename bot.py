# bot.py - ุงูุจูุช ุงูุฑุฆูุณู ูุน ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฏุงุฆูุฉ
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv

# ุงุณุชูุฑุงุฏ ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
from database import db_manager

# ุชุญููู ุงูุฅุนุฏุงุฏุงุช
load_dotenv()

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ๐ ุงูุฃูุฑ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุฃูุฑ ุงูุจุฏุก - ุฃูู ูุง ูุฑุณูู ุงููุณุชุฎุฏู"""
    user = update.message.from_user
    
    # ุชุณุฌูู ุงููุณุชุฎุฏู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    db_manager.add_or_update_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    welcome_text = f"""
๐ง ุฃููุงู ุจู {user.first_name}!

ุฃูุช ุชุชุญุฏุซ ูุน **ุจูุช ุงูุฏุฑูุณ ุงูุตูุชูุฉ ุงูุฏุงุฆู** ๐

๐ **ุงููููุฒุงุช:**
โข ุงูุจูุงูุงุช ูุญููุธุฉ ููุฃุจุฏ
โข ูุนูู 24/7 ุจุฏูู ุชููู
โข ุฅุญุตุงุฆูุงุช ุญูุฉ
โข ุจุญุซ ูุชูุฏู

๐ **ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:**
/start - ุจุฏุก ุงูุจูุช
/upload - ุฑูุน ูุชุจ ุฌุฏูุฏุฉ (ูููุณุคูููู)  
/books - ุนุฑุถ ุงููุชุจ ุงููุชุงุญุฉ
/search - ุงูุจุญุซ ูู ุงูููุชุจุฉ
/stats - ุฅุญุตุงุฆูุงุช ุงูููุชุจุฉ
/status - ุญุงูุฉ ุงูุฎุฏูุฉ
/help - ุงููุณุงุนุฏุฉ

๐ก **ุฌุฑุจ ุงูุขู:** ุฃุฑุณู /books ูุฑุคูุฉ ุงูููุชุจุฉ!
"""
    await update.message.reply_text(welcome_text)

# โ ุงูุฃูุฑ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ุฑุณุงูุฉ ุงููุณุงุนุฏุฉ"""
    help_text = """
๐ **ุฏููู ุงุณุชุฎุฏุงู ุงูุจูุช:**

๐ค **ูููุณุชุฎุฏููู ุงูุนุงุฏููู:**
/books - ุนุฑุถ ุฌููุน ุงููุชุจ
/search - ุงูุจุญุซ ูู ุงูููุชุจุฉ
/stats - ุฅุญุตุงุฆูุงุช ุงูููุชุจุฉ
/status - ุญุงูุฉ ุงูุฎุฏูุฉ

๐ **ูููุณุคูููู:**
/upload - ุฑูุน ูุชุจ ูุฏุฑูุณ ุฌุฏูุฏุฉ

๐ **ุฃูุซูุฉ:**
/books - ุนุฑุถ ุงูููุชุจุฉ
/search ูุฑุขู - ุงูุจุญุซ ุนู ุงููุฑุขู
/stats - ุฑุคูุฉ ุงูุฅุญุตุงุฆูุงุช

๐ ุงูุจูุช ูุนูู ุจุดูู ูุณุชูุฑ 24/7!
"""
    await update.message.reply_text(help_text)

# ๐ค ุจุฏุก ุฑูุน ูุชุงุจ ุฌุฏูุฏ
async def start_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุจุฏุก ุนูููุฉ ุฑูุน ูุชุงุจ ุฌุฏูุฏ"""
    user_id = update.message.from_user.id
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not db_manager.is_admin(user_id):
        await update.message.reply_text("โ ููุณ ูุฏูู ุตูุงุญูุฉ ุงูุฑูุน")
        return
    
    # ุชููุฆุฉ ุฌูุณุฉ ุงูุฑูุน
    context.user_data['upload_session'] = {
        'step': 'awaiting_book_name',
        'book_data': {
            'created_by': user_id
        }
    }
    
    await update.message.reply_text(
        "๐ค **ูุถุน ุฑูุน ุงููุชุจ**\n\n"
        "ุฃุฑุณู ุงุณู ุงููุชุงุจ:"
    )

# ๐ ูุนุงูุฌุฉ ุงุณู ุงููุชุงุจ
async def handle_book_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุงุณู ุงููุชุงุจ ูู ุงููุณุชุฎุฏู"""
    if 'upload_session' not in context.user_data:
        return
    
    session = context.user_data['upload_session']
    
    if session['step'] == 'awaiting_book_name':
        book_name = update.message.text
        session['book_data']['title'] = book_name
        session['step'] = 'awaiting_audio'
        
        await update.message.reply_text(
            f"โ ุชู ุญูุธ ุงุณู ุงููุชุงุจ: **{book_name}**\n\n"
            "๐ง ุงูุขู ุงุฑูุน ุงูููู ุงูุตูุชู ุงูุฃูู:\n"
            "โข ููููู ุฑูุน ููู ุตูุชู (MP3)\n"  
            "โข ุฃู ุชุณุฌูู ุฑุณุงูุฉ ุตูุชูุฉ\n"
            "โข ุซู ุฃุฑุณู ุงุณู ุงูุฏุฑุณ\n\n"
            "ุฃู /cancel ููุฅูุบุงุก"
        )

# ๐ต ูุนุงูุฌุฉ ุงููููุงุช ุงูุตูุชูุฉ
async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุงููููุงุช ุงูุตูุชูุฉ ุงููุฑููุนุฉ"""
    if 'upload_session' not in context.user_data:
        return
    
    session = context.user_data['upload_session']
    
    if session['step'] != 'awaiting_audio':
        return
    
    if update.message.audio:
        file_id = update.message.audio.file_id
        file_name = update.message.audio.file_name or "ููู ุตูุชู"
        
        session['pending_audio'] = {
            'file_id': file_id,
            'file_name': file_name
        }
        session['step'] = 'awaiting_lesson_name'
        
        await update.message.reply_text(
            f"๐ต ุชู ุงุณุชูุงู ุงูููู: **{file_name}**\n\n"
            "ุฃุฑุณู ุงุณู ูุฐุง ุงูุฏุฑุณ:"
        )
    
    elif update.message.voice:
        file_id = update.message.voice.file_id
        
        session['pending_audio'] = {
            'file_id': file_id,
            'file_name': "ุชุณุฌูู ุตูุชู"
        }
        session['step'] = 'awaiting_lesson_name'
        
        await update.message.reply_text(
            "๐ค ุชู ุงุณุชูุงู ุงูุชุณุฌูู ุงูุตูุชู\n\n"
            "ุฃุฑุณู ุงุณู ูุฐุง ุงูุฏุฑุณ:"
        )

# ๐ ูุนุงูุฌุฉ ุงุณู ุงูุฏุฑุณ
async def handle_lesson_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุงุณู ุงูุฏุฑุณ ูู ุงููุณุชุฎุฏู"""
    if 'upload_session' not in context.user_data or 'pending_audio' not in context.user_data['upload_session']:
        return
    
    session = context.user_data['upload_session']
    
    if session['step'] == 'awaiting_lesson_name':
        lesson_name = update.message.text
        
        # ุฅุฐุง ูู ูุชู ุฅูุดุงุก ุงููุชุงุจ ุจุนุฏุ ูู ุจุฅูุดุงุฆู ุฃููุงู
        if 'book_id' not in session['book_data']:
            book_id = db_manager.add_book(
                title=session['book_data']['title'],
                description="",
                category="ุนุงู",
                created_by=session['book_data']['created_by']
            )
            session['book_data']['book_id'] = book_id
            session['lesson_count'] = 0
        
        # ุฅุถุงูุฉ ุงูุฏุฑุณ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        db_manager.add_lesson(
            book_id=session['book_data']['book_id'],
            title=lesson_name,
            file_id=session['pending_audio']['file_id'],
            file_name=session['pending_audio']['file_name']
        )
        
        session['lesson_count'] = session.get('lesson_count', 0) + 1
        del session['pending_audio']
        session['step'] = 'awaiting_audio'
        
        await update.message.reply_text(
            f"โ ุชู ุฅุถุงูุฉ ุงูุฏุฑุณ: **{lesson_name}**\n"
            f"๐ ุนุฏุฏ ุงูุฏุฑูุณ: **{session['lesson_count']}**\n\n"
            "ููููู:\n"
            "โข ุฑูุน ุงูููู ุงูุชุงูู\n" 
            "โข ุฃู /finish ููุงูุชูุงุก\n"
            "โข ุฃู /cancel ููุฅูุบุงุก"
        )

# โ ุฅููุงุก ุงูุฑูุน
async def finish_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅููุงุก ุนูููุฉ ุงูุฑูุน ูุญูุธ ุงููุชุงุจ"""
    if 'upload_session' not in context.user_data:
        await update.message.reply_text("โ ูุง ููุฌุฏ ุฑูุน ุฌุงุฑู")
        return
    
    session = context.user_data['upload_session']
    lesson_count = session.get('lesson_count', 0)
    
    if lesson_count > 0:
        book_title = session['book_data']['title']
        
        await update.message.reply_text(
            f"๐ **ุชู ุงูุงูุชูุงุก ุจูุฌุงุญ!**\n\n"
            f"๐ ุงููุชุงุจ: **{book_title}**\n"
            f"๐ง ุนุฏุฏ ุงูุฏุฑูุณ: **{lesson_count}**\n\n"
            "๐ ุงุณุชุฎุฏู /books ูุฑุคูุฉ ุงููุชุงุจ ุงูุฌุฏูุฏ!"
        )
    else:
        await update.message.reply_text("โ ูู ูุชู ุฑูุน ุฃู ุฏุฑูุณ")
    
    # ุชูุธูู ุฌูุณุฉ ุงูุฑูุน
    if 'upload_session' in context.user_data:
        del context.user_data['upload_session']

# โ ุฅูุบุงุก ุงูุฑูุน
async def cancel_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅูุบุงุก ุนูููุฉ ุงูุฑูุน"""
    if 'upload_session' in context.user_data:
        del context.user_data['upload_session']
        await update.message.reply_text("โ ุชู ุฅูุบุงุก ุนูููุฉ ุงูุฑูุน")
    else:
        await update.message.reply_text("โ ูุง ููุฌุฏ ุฑูุน ุฌุงุฑู")

# ๐ ุนุฑุถ ุงููุชุจ ุงููุชุงุญุฉ
async def show_books(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ุฌููุน ุงููุชุจ ูู ุงูููุชุจุฉ"""
    books = db_manager.get_all_books()
    
    if not books:
        await update.message.reply_text(
            "๐ ูุง ุชูุฌุฏ ูุชุจ ูุชุงุญุฉ ุจุนุฏ\n\n"
            "ูุจุฏุก ุฑูุน ุงููุชุจุ ุงุณุชุฎุฏู:\n"
            "/upload (ูููุณุคูููู ููุท)"
        )
        return
    
    keyboard = []
    for book in books:
        button_text = f"๐ {book['title']} ({book['lesson_count']} ุฏุฑุณ)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"book_{book['id']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "๐ **ุงูููุชุจุฉ ุงูุตูุชูุฉ**\n\n"
        "ุงุฎุชุฑ ูุชุงุจุงู ููุงุณุชูุงุน:",
        reply_markup=reply_markup
    )

# ๐ ุงูุจุญุซ ูู ุงูููุชุจุฉ
async def search_books(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุงูุจุญุซ ูู ุนูุงููู ุงููุชุจ"""
    if not context.args:
        await update.message.reply_text(
            "๐ ุงูุชุจ ูููุฉ ููุจุญุซ:\n"
            "ูุซุงู: /search ุฑูุงุถูุงุช\n"
            "ูุซุงู: /search ูุฑุขู"
        )
        return
    
    query = " ".join(context.args)
    books = db_manager.get_all_books()
    
    # ุจุญุซ ุจุณูุท ูู ุงูุนูุงููู
    results = [book for book in books if query.lower() in book['title'].lower()]
    
    if not results:
        await update.message.reply_text(f"โ ูู ุฃุฌุฏ ูุชุงุฆุฌ ููุจุญุซ ุนู: {query}")
        return
    
    keyboard = []
    for book in results:
        button_text = f"๐ {book['title']} ({book['lesson_count']} ุฏุฑุณ)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"book_{book['id']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"๐ ูุชุงุฆุฌ ุงูุจุญุซ ุนู '{query}':",
        reply_markup=reply_markup
    )

# ๐ ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูููุชุจุฉ"""
    books = db_manager.get_all_books()
    total_books = len(books)
    total_lessons = sum(book['lesson_count'] for book in books)
    
    stats_text = f"""
๐ **ุฅุญุตุงุฆูุงุช ุงูููุชุจุฉ:**

๐ ุนุฏุฏ ุงููุชุจ: **{total_books}**
๐ง ุนุฏุฏ ุงูุฏุฑูุณ: **{total_lessons}**
๐ ุงูุฎุฏูุฉ: **๐ข ุชุนูู 24/7**

๐ ุงุณุชูุฑ ูู ุจูุงุก ููุชุจุชู!
"""
    await update.message.reply_text(stats_text)

# ๐ข ุญุงูุฉ ุงูุฎุฏูุฉ
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ุญุงูุฉ ุงูุจูุช ูุงูุฎุงุฏู"""
    status_text = """
๐ข **ุญุงูุฉ ุงูุฎุฏูุฉ:**

โ ุงูุจูุช: ูุนูู ุจุดูู ุทุจูุนู
โ ูุงุนุฏุฉ ุงูุจูุงูุงุช: ูุดุทุฉ
โ ุงูุฎุงุฏู: ูุชุตู

โฐ ุงูุฎุฏูุฉ ูุณุชูุฑุฉ 24/7
๐ง ุงูุตูุงูุฉ: ุชููุงุฆูุฉ

๐ ุฌุฑุจ ุงูุฃูุงูุฑ:
/books - ุฑุคูุฉ ุงูููุชุจุฉ
/stats - ุงูุฅุญุตุงุฆูุงุช
/help - ุงููุณุงุนุฏุฉ
"""
    await update.message.reply_text(status_text)

# ๐ ูุนุงูุฌุฉ ุงูููุฑ ุนูู ุงูุฃุฒุฑุงุฑ
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุงูููุฑ ุนูู ุฃุฒุฑุงุฑ Inline Keyboard"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("book_"):
        # ุนุฑุถ ุฏุฑูุณ ูุชุงุจ ูุนูู
        book_id = int(data.replace("book_", ""))
        book = db_manager.get_book_by_id(book_id)
        
        if not book:
            await query.edit_message_text("โ ุงููุชุงุจ ุบูุฑ ููุฌูุฏ")
            return
        
        lessons = db_manager.get_lessons_by_book(book_id)
        
        if not lessons:
            await query.edit_message_text("โ ูุง ุชูุฌุฏ ุฏุฑูุณ ูู ูุฐุง ุงููุชุงุจ")
            return
        
        keyboard = []
        for i, lesson in enumerate(lessons, 1):
            button_text = f"๐ง {i}. {lesson['title']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"lesson_{lesson['id']}")])
        
        keyboard.append([InlineKeyboardButton("๐ ุฑุฌูุน ูููุชุจ", callback_data="back_to_books")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        book_info = f"๐ **{book['title']}**\n\n๐ง **ุงูุฏุฑูุณ ({len(lessons)})**:"
        
        await query.edit_message_text(
            book_info,
            reply_markup=reply_markup
        )
    
    elif data.startswith("lesson_"):
        # ุชุดุบูู ุฏุฑุณ ูุนูู
        lesson_id = int(data.replace("lesson_", ""))
        lessons = db_manager.get_lessons_by_book(1)  # ูุญุชุงุฌ ุชุญุณูู ูุฐุง
        
        for lesson in lessons:
            if lesson['id'] == lesson_id:
                await context.bot.send_audio(
                    chat_id=query.message.chat_id,
                    audio=lesson['file_id'],
                    title=lesson['title'],
                    caption=f"๐ง {lesson['title']}"
                )
                break
    
    elif data == "back_to_books":
        # ุงูุนูุฏุฉ ููุงุฆูุฉ ุงููุชุจ
        await show_books_callback(update, context)

async def show_books_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ุงููุชุจ ุนูุฏ ุงูููุฑ ุนูู ุฒุฑ ุงูุฑุฌูุน"""
    query = update.callback_query
    books = db_manager.get_all_books()
    
    if not books:
        await query.edit_message_text("๐ ูุง ุชูุฌุฏ ูุชุจ ูุชุงุญุฉ ุจุนุฏ")
        return
    
    keyboard = []
    for book in books:
        button_text = f"๐ {book['title']} ({book['lesson_count']} ุฏุฑุณ)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"book_{book['id']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "๐ **ุงูููุชุจุฉ ุงูุตูุชูุฉ**\n\n"
        "ุงุฎุชุฑ ูุชุงุจุงู ููุงุณุชูุงุน:",
        reply_markup=reply_markup
    )

# ๐ ูุนุงูุฌุฉ ุฌููุน ุงูุฑุณุงุฆู ุงููุตูุฉ
async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุฌููุน ุงูุฑุณุงุฆู ุงููุตูุฉ"""
    user_id = update.message.from_user.id
    
    # ุชุญุฏูุซ ุขุฎุฑ ูุดุงุท ูููุณุชุฎุฏู
    db_manager.add_or_update_user(
        user_id=user_id,
        username=update.message.from_user.username,
        first_name=update.message.from_user.first_name,
        last_name=update.message.from_user.last_name
    )
    
    # ุชูุฌูู ุงูุฑุณุงูุฉ ูููุนุงูุฌ ุงูููุงุณุจ
    if 'upload_session' in context.user_data:
        session = context.user_data['upload_session']
        
        if session['step'] == 'awaiting_book_name':
            await handle_book_name(update, context)
        elif session['step'] == 'awaiting_lesson_name':
            await handle_lesson_name(update, context)

# ๐ ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุชุดุบูู ุงูุจูุช"""
    TOKEN = os.getenv('BOT_TOKEN')
    
    if not TOKEN:
        print("โ ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุชููู")
        print("๐ ุชุฃูุฏ ูู ุฅุถุงูุฉ BOT_TOKEN=ุชููู_ุงูุจูุช ูู ููู .env")
        return

    try:
        # ุฅูุดุงุก ุงูุชุทุจูู
        application = Application.builder().token(TOKEN).build()

        # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("upload", start_upload))
        application.add_handler(CommandHandler("finish", finish_upload))
        application.add_handler(CommandHandler("cancel", cancel_upload))
        application.add_handler(CommandHandler("books", show_books))
        application.add_handler(CommandHandler("search", search_books))
        
        # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฑุณุงุฆู
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
        application.add_handler(MessageHandler(filters.AUDIO | filters.VOICE, handle_audio))
        
        # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃุฒุฑุงุฑ
        application.add_handler(CallbackQueryHandler(button_handler))

        # ุจุฏุก ุงูุจูุช
        print("๐ ุงูุจูุช ูุนูู ุงูุขู ูุน ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฏุงุฆูุฉ!")
        print("๐ ุงุถุบุท Ctrl+C ูุฅููุงู ุงูุจูุช")
        print("๐ ุงุฐูุจ ูุชููุฌุฑุงู ูุฌุฑุจ ุงูุจูุช!")
        
        application.run_polling()
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุชุดุบูู ุงูุจูุช: {e}")
    finally:
        # ุฅุบูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุนูุฏ ุฅููุงู ุงูุจูุช
        db_manager.close()

if __name__ == '__main__':
    main()